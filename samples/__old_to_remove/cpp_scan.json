{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "CodeQL",
          "organization": "GitHub",
          "semanticVersion": "2.2.5",
          "rules": [
            {
              "id": "cpp/new-free-mismatch",
              "name": "cpp/new-free-mismatch",
              "shortDescription": {
                "text": "Mismatching new/free or malloc/delete"
              },
              "fullDescription": {
                "text": "An object that was allocated with 'malloc' or 'new' is being freed using a mismatching 'free' or 'delete'."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-401"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Mismatching new/free or malloc/delete",
                "description": "An object that was allocated with 'malloc' or 'new' is being freed using a mismatching 'free' or 'delete'.",
                "id": "cpp/new-free-mismatch",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/alloca-in-loop",
              "name": "cpp/alloca-in-loop",
              "shortDescription": {
                "text": "Call to alloca in a loop"
              },
              "fullDescription": {
                "text": "Using alloca in a loop can lead to a stack overflow"
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-770"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Call to alloca in a loop",
                "description": "Using alloca in a loop can lead to a stack overflow",
                "id": "cpp/alloca-in-loop",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/pointer-overflow-check",
              "name": "cpp/pointer-overflow-check",
              "shortDescription": {
                "text": "Pointer overflow check"
              },
              "fullDescription": {
                "text": "Adding a value to a pointer to check if it overflows relies on undefined behavior and may lead to memory corruption."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Pointer overflow check",
                "description": "Adding a value to a pointer to check if it overflows relies\n              on undefined behavior and may lead to memory corruption.",
                "id": "cpp/pointer-overflow-check",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/overflowing-snprintf",
              "name": "cpp/overflowing-snprintf",
              "shortDescription": {
                "text": "Potentially overflowing call to snprintf"
              },
              "fullDescription": {
                "text": "Using the return value from snprintf without proper checks can cause overflow."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Potentially overflowing call to snprintf",
                "description": "Using the return value from snprintf without proper checks can cause overflow.",
                "id": "cpp/overflowing-snprintf",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/wrong-number-format-arguments",
              "name": "cpp/wrong-number-format-arguments",
              "shortDescription": {
                "text": "Too few arguments to formatting function"
              },
              "fullDescription": {
                "text": "Calling a printf-like function with too few arguments can be a source of security issues."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-685"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Too few arguments to formatting function",
                "description": "Calling a printf-like function with too few arguments can be\n              a source of security issues.",
                "id": "cpp/wrong-number-format-arguments",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/wrong-type-format-argument",
              "name": "cpp/wrong-type-format-argument",
              "shortDescription": {
                "text": "Wrong type of arguments to formatting function"
              },
              "fullDescription": {
                "text": "Calling a printf-like function with the wrong type of arguments causes unpredictable behavior."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-686"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Wrong type of arguments to formatting function",
                "description": "Calling a printf-like function with the wrong type of arguments causes unpredictable\n              behavior.",
                "id": "cpp/wrong-type-format-argument",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/upcast-array-pointer-arithmetic",
              "name": "cpp/upcast-array-pointer-arithmetic",
              "shortDescription": {
                "text": "Upcast array used in pointer arithmetic"
              },
              "fullDescription": {
                "text": "An array with elements of a derived struct type is cast to a pointer to the base type of the struct. If pointer arithmetic or an array dereference is done on the resulting pointer, it will use the width of the base type, leading to misaligned reads."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness",
                  "reliability",
                  "security",
                  "external/cwe/cwe-119",
                  "external/cwe/cwe-843"
                ],
                "kind": "path-problem",
                "precision": "high",
                "name": "Upcast array used in pointer arithmetic",
                "description": "An array with elements of a derived struct type is cast to a\n              pointer to the base type of the struct. If pointer arithmetic or\n              an array dereference is done on the resulting pointer, it will\n              use the width of the base type, leading to misaligned reads.",
                "id": "cpp/upcast-array-pointer-arithmetic",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/too-few-arguments",
              "name": "cpp/too-few-arguments",
              "shortDescription": {
                "text": "Call to function with fewer arguments than declared parameters"
              },
              "fullDescription": {
                "text": "A function call is passing fewer arguments than the number of declared parameters of the function. This may indicate that the code does not follow the author's intent. It is also a vulnerability, since the function is likely to operate on undefined data."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "correctness",
                  "maintainability",
                  "security"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Call to function with fewer arguments than declared parameters",
                "description": "A function call is passing fewer arguments than the number of\n              declared parameters of the function. This may indicate\n              that the code does not follow the author's intent. It is also\n              a vulnerability, since the function is likely to operate on\n              undefined data.",
                "id": "cpp/too-few-arguments",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/integer-multiplication-cast-to-long",
              "name": "cpp/integer-multiplication-cast-to-long",
              "shortDescription": {
                "text": "Multiplication result converted to larger type"
              },
              "fullDescription": {
                "text": "A multiplication result that is converted to a larger type can be a sign that the result can overflow the type converted from."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "correctness",
                  "types",
                  "external/cwe/cwe-190",
                  "external/cwe/cwe-192",
                  "external/cwe/cwe-197",
                  "external/cwe/cwe-681"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Multiplication result converted to larger type",
                "description": "A multiplication result that is converted to a larger type can\n              be a sign that the result can overflow the type converted from.",
                "id": "cpp/integer-multiplication-cast-to-long",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/signed-overflow-check",
              "name": "cpp/signed-overflow-check",
              "shortDescription": {
                "text": "Signed overflow check"
              },
              "fullDescription": {
                "text": "Testing for overflow by adding a value to a variable to see if it \"wraps around\" works only for unsigned integer values."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness",
                  "security"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Signed overflow check",
                "description": "Testing for overflow by adding a value to a variable\n              to see if it \"wraps around\" works only for\n              unsigned integer values.",
                "id": "cpp/signed-overflow-check",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/bad-addition-overflow-check",
              "name": "cpp/bad-addition-overflow-check",
              "shortDescription": {
                "text": "Bad check for overflow of integer addition"
              },
              "fullDescription": {
                "text": "Checking for overflow of integer addition by comparing against one of the arguments of the addition does not work when the result of the addition is automatically promoted to a larger type."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-190",
                  "external/cwe/cwe-192"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Bad check for overflow of integer addition",
                "description": "Checking for overflow of integer addition by comparing\n              against one of the arguments of the addition does not work\n              when the result of the addition is automatically promoted\n              to a larger type.",
                "id": "cpp/bad-addition-overflow-check",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/no-space-for-terminator",
              "name": "cpp/no-space-for-terminator",
              "shortDescription": {
                "text": "No space for zero terminator"
              },
              "fullDescription": {
                "text": "Allocating a buffer using 'malloc' without ensuring that there is always space for the entire string and a zero terminator can cause a buffer overrun."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-131",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-122"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "No space for zero terminator",
                "description": "Allocating a buffer using 'malloc' without ensuring that\n              there is always space for the entire string and a zero\n              terminator can cause a buffer overrun.",
                "id": "cpp/no-space-for-terminator",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/sql-injection",
              "name": "cpp/sql-injection",
              "shortDescription": {
                "text": "Uncontrolled data in SQL query"
              },
              "fullDescription": {
                "text": "Including user-supplied data in a SQL query without neutralizing special elements can make code vulnerable to SQL Injection."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-089"
                ],
                "kind": "path-problem",
                "precision": "high",
                "name": "Uncontrolled data in SQL query",
                "description": "Including user-supplied data in a SQL query without\n              neutralizing special elements can make code vulnerable\n              to SQL Injection.",
                "id": "cpp/sql-injection",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/dangerous-function-overflow",
              "name": "cpp/dangerous-function-overflow",
              "shortDescription": {
                "text": "Use of dangerous function"
              },
              "fullDescription": {
                "text": "Use of a standard library function that does not guard against buffer overflow."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-242"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Use of dangerous function",
                "description": "Use of a standard library function that does not guard against buffer overflow.",
                "id": "cpp/dangerous-function-overflow",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/dangerous-cin",
              "name": "cpp/dangerous-cin",
              "shortDescription": {
                "text": "Dangerous use of 'cin'"
              },
              "fullDescription": {
                "text": "Using `cin` without specifying the length of the input may be dangerous."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-676"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Dangerous use of 'cin'",
                "description": "Using `cin` without specifying the length of the input\n              may be dangerous.",
                "id": "cpp/dangerous-cin",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/potentially-dangerous-function",
              "name": "cpp/potentially-dangerous-function",
              "shortDescription": {
                "text": "Use of potentially dangerous function"
              },
              "fullDescription": {
                "text": "Use of a standard library function that is not thread-safe."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-676"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Use of potentially dangerous function",
                "description": "Use of a standard library function that is not thread-safe.",
                "id": "cpp/potentially-dangerous-function",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/badly-bounded-write",
              "name": "cpp/badly-bounded-write",
              "shortDescription": {
                "text": "Badly bounded write"
              },
              "fullDescription": {
                "text": "Buffer write operations with a length parameter that does not match the size of the destination buffer may overflow."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-787",
                  "external/cwe/cwe-805"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Badly bounded write",
                "description": "Buffer write operations with a length parameter that\n              does not match the size of the destination buffer may\n              overflow.",
                "id": "cpp/badly-bounded-write",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/openssl-heartbleed",
              "name": "cpp/openssl-heartbleed",
              "shortDescription": {
                "text": "Use of a version of OpenSSL with Heartbleed"
              },
              "fullDescription": {
                "text": "Using an old version of OpenSSL can allow remote attackers to retrieve portions of memory."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327",
                  "external/cwe/cwe-788"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Use of a version of OpenSSL with Heartbleed",
                "description": "Using an old version of OpenSSL can allow remote\n              attackers to retrieve portions of memory.",
                "id": "cpp/openssl-heartbleed",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/suspicious-add-sizeof",
              "name": "cpp/suspicious-add-sizeof",
              "shortDescription": {
                "text": "Suspicious add with sizeof"
              },
              "fullDescription": {
                "text": "Explicitly scaled pointer arithmetic expressions can cause buffer overflow conditions if the offset is also implicitly scaled."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-468"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Suspicious add with sizeof",
                "description": "Explicitly scaled pointer arithmetic expressions\n              can cause buffer overflow conditions if the offset is also\n              implicitly scaled.",
                "id": "cpp/suspicious-add-sizeof",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/cgi-xss",
              "name": "cpp/cgi-xss",
              "shortDescription": {
                "text": "CGI script vulnerable to cross-site scripting"
              },
              "fullDescription": {
                "text": "Writing user input directly to a web page allows for a cross-site scripting vulnerability."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-079"
                ],
                "kind": "path-problem",
                "precision": "high",
                "name": "CGI script vulnerable to cross-site scripting",
                "description": "Writing user input directly to a web page\n              allows for a cross-site scripting vulnerability.",
                "id": "cpp/cgi-xss",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/tainted-format-string",
              "name": "cpp/tainted-format-string",
              "shortDescription": {
                "text": "Uncontrolled format string"
              },
              "fullDescription": {
                "text": "Using externally-controlled format strings in printf-style functions can lead to buffer overflows or data representation problems."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-134"
                ],
                "kind": "path-problem",
                "precision": "high",
                "name": "Uncontrolled format string",
                "description": "Using externally-controlled format strings in\n              printf-style functions can lead to buffer overflows\n              or data representation problems.",
                "id": "cpp/tainted-format-string",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/tainted-format-string-through-global",
              "name": "cpp/tainted-format-string-through-global",
              "shortDescription": {
                "text": "Uncontrolled format string (through global variable)"
              },
              "fullDescription": {
                "text": "Using externally-controlled format strings in printf-style functions can lead to buffer overflows or data representation problems."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-134"
                ],
                "kind": "path-problem",
                "precision": "high",
                "name": "Uncontrolled format string (through global variable)",
                "description": "Using externally-controlled format strings in\n              printf-style functions can lead to buffer overflows\n              or data representation problems.",
                "id": "cpp/tainted-format-string-through-global",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/hresult-boolean-conversion",
              "name": "cpp/hresult-boolean-conversion",
              "shortDescription": {
                "text": "Cast between HRESULT and a Boolean type"
              },
              "fullDescription": {
                "text": "Casting an HRESULT to/from a Boolean type and then using it in a test expression will yield an incorrect result because success (S_OK) in HRESULT is indicated by a value of 0."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-253",
                  "external/microsoft/C6214",
                  "external/microsoft/C6215",
                  "external/microsoft/C6216",
                  "external/microsoft/C6217",
                  "external/microsoft/C6230"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Cast between HRESULT and a Boolean type",
                "description": "Casting an HRESULT to/from a Boolean type and then using it in a test expression will yield an incorrect result because success (S_OK) in HRESULT is indicated by a value of 0.",
                "id": "cpp/hresult-boolean-conversion",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/comparison-with-wider-type",
              "name": "cpp/comparison-with-wider-type",
              "shortDescription": {
                "text": "Comparison of narrow type with wide type in loop condition"
              },
              "fullDescription": {
                "text": "Comparisons between types of different widths in a loop condition can cause the loop to behave unexpectedly."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-190",
                  "external/cwe/cwe-197",
                  "external/cwe/cwe-835"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Comparison of narrow type with wide type in loop condition",
                "description": "Comparisons between types of different widths in a loop\n              condition can cause the loop to behave unexpectedly.",
                "id": "cpp/comparison-with-wider-type",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/uncontrolled-allocation-size",
              "name": "cpp/uncontrolled-allocation-size",
              "shortDescription": {
                "text": "Overflow in uncontrolled allocation size"
              },
              "fullDescription": {
                "text": "Allocating memory with a size controlled by an external user can result in integer overflow."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-190"
                ],
                "kind": "path-problem",
                "precision": "high",
                "name": "Overflow in uncontrolled allocation size",
                "description": "Allocating memory with a size controlled by an external\n              user can result in integer overflow.",
                "id": "cpp/uncontrolled-allocation-size",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/incorrect-string-type-conversion",
              "name": "cpp/incorrect-string-type-conversion",
              "shortDescription": {
                "text": "Cast from char* to wchar_t*"
              },
              "fullDescription": {
                "text": "Casting a byte string to a wide-character string is likely to yield a string that is incorrectly terminated or aligned. This can lead to undefined behavior, including buffer overruns."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-704",
                  "external/microsoft/c/c6276"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Cast from char* to wchar_t*",
                "description": "Casting a byte string to a wide-character string is likely\n              to yield a string that is incorrectly terminated or aligned.\n              This can lead to undefined behavior, including buffer overruns.",
                "id": "cpp/incorrect-string-type-conversion",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/unsafe-dacl-security-descriptor",
              "name": "cpp/unsafe-dacl-security-descriptor",
              "shortDescription": {
                "text": "Setting a DACL to NULL in a SECURITY_DESCRIPTOR"
              },
              "fullDescription": {
                "text": "Setting a DACL to NULL in a SECURITY_DESCRIPTOR will result in an unprotected object. If the DACL that belongs to the security descriptor of an object is set to NULL, a null DACL is created. A null DACL grants full access to any user who requests it; normal security checking is not performed with respect to the object."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-732",
                  "external/microsoft/C6248"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Setting a DACL to NULL in a SECURITY_DESCRIPTOR",
                "description": "Setting a DACL to NULL in a SECURITY_DESCRIPTOR will result in an unprotected object.\n              If the DACL that belongs to the security descriptor of an object is set to NULL, a null DACL is created.\n              A null DACL grants full access to any user who requests it;\n              normal security checking is not performed with respect to the object.",
                "id": "cpp/unsafe-dacl-security-descriptor",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/large-parameter",
              "name": "cpp/large-parameter",
              "shortDescription": {
                "text": "Large object passed by value"
              },
              "fullDescription": {
                "text": "An object larger than 64 bytes is passed by value to a function. Passing large objects by value unnecessarily use up scarce stack space, increase the cost of calling a function and can be a security risk. Use a const pointer to the object instead."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "efficiency",
                  "readability",
                  "statistical",
                  "non-attributable"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Large object passed by value",
                "description": "An object larger than 64 bytes is passed by value to a function. Passing large objects by value unnecessarily use up scarce stack space, increase the cost of calling a function and can be a security risk. Use a const pointer to the object instead.",
                "id": "cpp/large-parameter",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/new-array-delete-mismatch",
              "name": "cpp/new-array-delete-mismatch",
              "shortDescription": {
                "text": "'new[]' array freed with 'delete'"
              },
              "fullDescription": {
                "text": "An array allocated with 'new[]' is being freed using 'delete'. Behavior in such cases is undefined and should be avoided. Use 'delete[]' when freeing arrays allocated with 'new[]'."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "'new[]' array freed with 'delete'",
                "description": "An array allocated with 'new[]' is being freed using 'delete'. Behavior in such cases is undefined and should be avoided. Use 'delete[]' when freeing arrays allocated with 'new[]'.",
                "id": "cpp/new-array-delete-mismatch",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/new-delete-array-mismatch",
              "name": "cpp/new-delete-array-mismatch",
              "shortDescription": {
                "text": "'new' object freed with 'delete[]'"
              },
              "fullDescription": {
                "text": "An object that was allocated with 'new' is being freed using 'delete[]'. Behavior in such cases is undefined and should be avoided. Use 'delete' instead."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "'new' object freed with 'delete[]'",
                "description": "An object that was allocated with 'new' is being freed using 'delete[]'. Behavior in such cases is undefined and should be avoided. Use 'delete' instead.",
                "id": "cpp/new-delete-array-mismatch",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/dead-code-goto",
              "name": "cpp/dead-code-goto",
              "shortDescription": {
                "text": "Dead code due to goto or break statement"
              },
              "fullDescription": {
                "text": "A goto or break statement is followed by unreachable code."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "external/cwe/cwe-561"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Dead code due to goto or break statement",
                "description": "A goto or break statement is followed by unreachable code.",
                "id": "cpp/dead-code-goto",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/rethrow-no-exception",
              "name": "cpp/rethrow-no-exception",
              "shortDescription": {
                "text": "Accidental rethrow"
              },
              "fullDescription": {
                "text": "When there is nothing to rethrow, attempting to rethrow an exception will terminate the program."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "exceptions"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Accidental rethrow",
                "description": "When there is nothing to rethrow, attempting to rethrow an exception will terminate the program.",
                "id": "cpp/rethrow-no-exception",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/catch-missing-free",
              "name": "cpp/catch-missing-free",
              "shortDescription": {
                "text": "Leaky catch"
              },
              "fullDescription": {
                "text": "If an exception is allocated on the heap, then it should be deleted when caught."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "efficiency",
                  "correctness",
                  "exceptions",
                  "external/cwe/cwe-401"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Leaky catch",
                "description": "If an exception is allocated on the heap, then it should be deleted when caught.",
                "id": "cpp/catch-missing-free",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/throwing-pointer",
              "name": "cpp/throwing-pointer",
              "shortDescription": {
                "text": "Throwing pointers"
              },
              "fullDescription": {
                "text": "Exceptions should be objects rather than pointers to objects."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "efficiency",
                  "correctness",
                  "exceptions"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Throwing pointers",
                "description": "Exceptions should be objects rather than pointers to objects.",
                "id": "cpp/throwing-pointer",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/catch-by-value",
              "name": "cpp/catch-by-value",
              "shortDescription": {
                "text": "Catching by value"
              },
              "fullDescription": {
                "text": "Catching an exception by value will create a copy of the thrown exception, thereby potentially slicing the original exception object."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "efficiency",
                  "correctness",
                  "exceptions"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Catching by value",
                "description": "Catching an exception by value will create a copy of the thrown exception, thereby potentially slicing the original exception object.",
                "id": "cpp/catch-by-value",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/complex-block",
              "name": "cpp/complex-block",
              "shortDescription": {
                "text": "Block with too many statements"
              },
              "fullDescription": {
                "text": "Blocks with too many consecutive statements are candidates for refactoring. Only complex statements are counted here (eg. for, while, switch ...). The top-level logic will be clearer if each complex statement is extracted to a function."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "testability",
                  "readability",
                  "maintainability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Block with too many statements",
                "description": "Blocks with too many consecutive statements are candidates for refactoring. Only complex statements are counted here (eg. for, while, switch ...). The top-level logic will be clearer if each complex statement is extracted to a function.",
                "id": "cpp/complex-block",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/use-of-goto",
              "name": "cpp/use-of-goto",
              "shortDescription": {
                "text": "Use of goto"
              },
              "fullDescription": {
                "text": "The goto statement can make the control flow of a function hard to understand, when used for purposes other than error handling."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Use of goto",
                "description": "The goto statement can make the control flow of a function hard\n              to understand, when used for purposes other than error handling.",
                "id": "cpp/use-of-goto",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/slicing",
              "name": "cpp/slicing",
              "shortDescription": {
                "text": "Slicing"
              },
              "fullDescription": {
                "text": "Assigning a non-reference instance of a derived type to a variable of the base type slices off all members added by the derived class, and can cause an unexpected state."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "types"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Slicing",
                "description": "Assigning a non-reference instance of a derived type to a variable of the base type slices off all members added by the derived class, and can cause an unexpected state.",
                "id": "cpp/slicing",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/empty-block",
              "name": "cpp/empty-block",
              "shortDescription": {
                "text": "Empty branch of conditional"
              },
              "fullDescription": {
                "text": "An empty block after a conditional can be a sign of an omission and can decrease maintainability of the code. Such blocks should contain an explanatory comment to aid future maintainers."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Empty branch of conditional",
                "description": "An empty block after a conditional can be a sign of an omission\n              and can decrease maintainability of the code. Such blocks\n              should contain an explanatory comment to aid future\n              maintainers.",
                "id": "cpp/empty-block",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/short-global-name",
              "name": "cpp/short-global-name",
              "shortDescription": {
                "text": "Short global name"
              },
              "fullDescription": {
                "text": "Global variables should have descriptive names, to help document their use, avoid namespace pollution and reduce the risk of shadowing with local variables."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Short global name",
                "description": "Global variables should have descriptive names, to help document their use, avoid namespace pollution and reduce the risk of shadowing with local variables.",
                "id": "cpp/short-global-name",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/unused-local-variable",
              "name": "cpp/unused-local-variable",
              "shortDescription": {
                "text": "Unused local variable"
              },
              "fullDescription": {
                "text": "A local variable that is never called or accessed may be an indication that the code is incomplete or has a typo."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "useless-code",
                  "external/cwe/cwe-563"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Unused local variable",
                "description": "A local variable that is never called or accessed may be an\n              indication that the code is incomplete or has a typo.",
                "id": "cpp/unused-local-variable",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/unused-static-function",
              "name": "cpp/unused-static-function",
              "shortDescription": {
                "text": "Unused static function"
              },
              "fullDescription": {
                "text": "A static function that is never called or accessed may be an indication that the code is incomplete or has a typo."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "efficiency",
                  "useless-code",
                  "external/cwe/cwe-561"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Unused static function",
                "description": "A static function that is never called or accessed may be an\n              indication that the code is incomplete or has a typo.",
                "id": "cpp/unused-static-function",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/unused-static-variable",
              "name": "cpp/unused-static-variable",
              "shortDescription": {
                "text": "Unused static variable"
              },
              "fullDescription": {
                "text": "A static variable that is never accessed may be an indication that the code is incomplete or has a typo."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "efficiency",
                  "useless-code",
                  "external/cwe/cwe-563"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Unused static variable",
                "description": "A static variable that is never accessed may be an indication\n              that the code is incomplete or has a typo.",
                "id": "cpp/unused-static-variable",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/long-switch",
              "name": "cpp/long-switch",
              "shortDescription": {
                "text": "Long switch case"
              },
              "fullDescription": {
                "text": "A switch statement with too much code in its cases can make the control flow hard to follow. Consider wrapping the code for each case in a function and just using the switch statement to invoke the appropriate function in each case."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Long switch case",
                "description": "A switch statement with too much code in its cases can make the control flow hard to follow. Consider wrapping the code for each case in a function and just using the switch statement to invoke the appropriate function in each case.",
                "id": "cpp/long-switch",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/declaration-hides-variable",
              "name": "cpp/declaration-hides-variable",
              "shortDescription": {
                "text": "Declaration hides variable"
              },
              "fullDescription": {
                "text": "A local variable hides another local variable from a surrounding scope. This may be confusing. Consider renaming one of the variables."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Declaration hides variable",
                "description": "A local variable hides another local variable from a surrounding scope. This may be confusing. Consider renaming one of the variables.",
                "id": "cpp/declaration-hides-variable",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/local-variable-hides-global-variable",
              "name": "cpp/local-variable-hides-global-variable",
              "shortDescription": {
                "text": "Local variable hides global variable"
              },
              "fullDescription": {
                "text": "A local variable or parameter that hides a global variable of the same name. This may be confusing. Consider renaming one of the variables."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Local variable hides global variable",
                "description": "A local variable or parameter that hides a global variable of the same name. This may be confusing. Consider renaming one of the variables.",
                "id": "cpp/local-variable-hides-global-variable",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/declaration-hides-parameter",
              "name": "cpp/declaration-hides-parameter",
              "shortDescription": {
                "text": "Declaration hides parameter"
              },
              "fullDescription": {
                "text": "A local variable hides a parameter. This may be confusing. Consider renaming one of them."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Declaration hides parameter",
                "description": "A local variable hides a parameter. This may be confusing. Consider renaming one of them.",
                "id": "cpp/declaration-hides-parameter",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/rule-of-two",
              "name": "cpp/rule-of-two",
              "shortDescription": {
                "text": "Inconsistent definition of copy constructor and assignment ('Rule of Two')"
              },
              "fullDescription": {
                "text": "Classes that have an explicit copy constructor or copy assignment operator may behave inconsistently if they do not have both."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Inconsistent definition of copy constructor and assignment ('Rule of Two')",
                "description": "Classes that have an explicit copy constructor or copy\n              assignment operator may behave inconsistently if they do\n              not have both.",
                "id": "cpp/rule-of-two",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/complex-condition",
              "name": "cpp/complex-condition",
              "shortDescription": {
                "text": "Complex condition"
              },
              "fullDescription": {
                "text": "Boolean expressions that are too deeply nested are hard to read and understand. Consider naming intermediate results as local variables."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "testability",
                  "readability",
                  "maintainability",
                  "statistical",
                  "non-attributable"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Complex condition",
                "description": "Boolean expressions that are too deeply nested are hard to read and understand. Consider naming intermediate results as local variables.",
                "id": "cpp/complex-condition",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/use-in-own-initializer",
              "name": "cpp/use-in-own-initializer",
              "shortDescription": {
                "text": "Variable used in its own initializer"
              },
              "fullDescription": {
                "text": "Loading from a variable in its own initializer may lead to undefined behavior."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Variable used in its own initializer",
                "description": "Loading from a variable in its own initializer may lead to undefined behavior.",
                "id": "cpp/use-in-own-initializer",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/return-c-str-of-std-string",
              "name": "cpp/return-c-str-of-std-string",
              "shortDescription": {
                "text": "Return c_str of local std::string"
              },
              "fullDescription": {
                "text": "Returning the c_str of a locally allocated std::string could cause the program to crash or behave non-deterministically because the memory is deallocated when the std::string goes out of scope."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Return c_str of local std::string",
                "description": "Returning the c_str of a locally allocated std::string\n   could cause the program to crash or behave non-deterministically\n   because the memory is deallocated when the std::string goes out of\n   scope.",
                "id": "cpp/return-c-str-of-std-string",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/return-stack-allocated-memory",
              "name": "cpp/return-stack-allocated-memory",
              "shortDescription": {
                "text": "Returning stack-allocated memory"
              },
              "fullDescription": {
                "text": "A function returns a pointer to a stack-allocated region of memory. This memory is deallocated at the end of the function, which may lead the caller to dereference a dangling pointer."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "external/cwe/cwe-825"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Returning stack-allocated memory",
                "description": "A function returns a pointer to a stack-allocated region of\n              memory. This memory is deallocated at the end of the function,\n              which may lead the caller to dereference a dangling pointer.",
                "id": "cpp/return-stack-allocated-memory",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/ambiguously-signed-bit-field",
              "name": "cpp/ambiguously-signed-bit-field",
              "shortDescription": {
                "text": "Ambiguously signed bit-field member"
              },
              "fullDescription": {
                "text": "Bit fields with integral types should have explicit signedness only. For example, use `unsigned int` rather than `int`. It is implementation specific whether an `int`-typed bit field is signed, so there could be unexpected sign extension or overflow."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features",
                  "external/cwe/cwe-190"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Ambiguously signed bit-field member",
                "description": "Bit fields with integral types should have explicit signedness\n              only. For example, use `unsigned int` rather than `int`. It is\n              implementation specific whether an `int`-typed bit field is\n              signed, so there could be unexpected sign extension or\n              overflow.",
                "id": "cpp/ambiguously-signed-bit-field",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/too-many-format-arguments",
              "name": "cpp/too-many-format-arguments",
              "shortDescription": {
                "text": "Too many arguments to formatting function"
              },
              "fullDescription": {
                "text": "A printf-like function called with too many arguments will ignore the excess arguments and output less than might have been intended."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Too many arguments to formatting function",
                "description": "A printf-like function called with too many arguments will\n              ignore the excess arguments and output less than might\n              have been intended.",
                "id": "cpp/too-many-format-arguments",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/non-constant-format",
              "name": "cpp/non-constant-format",
              "shortDescription": {
                "text": "Non-constant format string"
              },
              "fullDescription": {
                "text": "Passing a non-constant 'format' string to a printf-like function can lead to a mismatch between the number of arguments defined by the 'format' and the number of arguments actually passed to the function. If the format string ultimately stems from an untrusted source, this can be used for exploits."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-134"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Non-constant format string",
                "description": "Passing a non-constant 'format' string to a printf-like function can lead\n              to a mismatch between the number of arguments defined by the 'format' and the number\n              of arguments actually passed to the function. If the format string ultimately stems\n              from an untrusted source, this can be used for exploits.",
                "id": "cpp/non-constant-format",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/implicit-bitfield-downcast",
              "name": "cpp/implicit-bitfield-downcast",
              "shortDescription": {
                "text": "Implicit downcast from bitfield"
              },
              "fullDescription": {
                "text": "A bitfield is implicitly downcast to a smaller integer type. This could lead to loss of upper bits of the bitfield."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "types"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Implicit downcast from bitfield",
                "description": "A bitfield is implicitly downcast to a smaller integer type.\n              This could lead to loss of upper bits of the bitfield.",
                "id": "cpp/implicit-bitfield-downcast",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/array-arg-size-mismatch",
              "name": "cpp/array-arg-size-mismatch",
              "shortDescription": {
                "text": "Array argument size mismatch"
              },
              "fullDescription": {
                "text": "Finds function calls where the size of an array being passed is smaller than the array size of the declared parameter. This could lead to accesses to memory locations beyond the parameter's array bounds."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Array argument size mismatch",
                "description": "Finds function calls where the size of an array being passed is smaller than the array size of the declared parameter.\n              This could lead to accesses to memory locations beyond the parameter's array bounds.",
                "id": "cpp/array-arg-size-mismatch",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/lossy-pointer-cast",
              "name": "cpp/lossy-pointer-cast",
              "shortDescription": {
                "text": "Lossy pointer cast"
              },
              "fullDescription": {
                "text": "A pointer type is converted to a smaller integer type. This may lead to loss of information in the variable and is highly non-portable."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "types"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Lossy pointer cast",
                "description": "A pointer type is converted to a smaller integer type. This may\n              lead to loss of information in the variable and is highly\n              non-portable.",
                "id": "cpp/lossy-pointer-cast",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/non-member-const-no-effect",
              "name": "cpp/non-member-const-no-effect",
              "shortDescription": {
                "text": "Constant return type"
              },
              "fullDescription": {
                "text": "A 'const' modifier on a function return type is useless and should be removed for clarity."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Constant return type",
                "description": "A 'const' modifier on a function return type is useless and should be removed for clarity.",
                "id": "cpp/non-member-const-no-effect",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/member-const-no-effect",
              "name": "cpp/member-const-no-effect",
              "shortDescription": {
                "text": "Constant return type on member"
              },
              "fullDescription": {
                "text": "A 'const' modifier on a member function return type is useless. It is usually a typo or misunderstanding, since the syntax for a 'const' function is 'int foo() const', not 'const int foo()'."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Constant return type on member",
                "description": "A 'const' modifier on a member function return type is useless. It is usually a typo or misunderstanding, since the syntax for a 'const' function is 'int foo() const', not 'const int foo()'.",
                "id": "cpp/member-const-no-effect",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/futile-params",
              "name": "cpp/futile-params",
              "shortDescription": {
                "text": "Call to function with extraneous arguments"
              },
              "fullDescription": {
                "text": "A function call to a function passed more arguments than there are declared parameters of the function. This may indicate that the code does not follow the author's intent."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness",
                  "maintainability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Call to function with extraneous arguments",
                "description": "A function call to a function passed more arguments than there are\n              declared parameters of the function.  This may indicate\n              that the code does not follow the author's intent.",
                "id": "cpp/futile-params",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/implicit-function-declaration",
              "name": "cpp/implicit-function-declaration",
              "shortDescription": {
                "text": "Implicit function declaration"
              },
              "fullDescription": {
                "text": "An implicitly declared function is assumed to take no arguments and return an integer. If this assumption does not hold, it may lead to unpredictable behavior."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness",
                  "maintainability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Implicit function declaration",
                "description": "An implicitly declared function is assumed to take no\n arguments and return an integer. If this assumption does not hold, it\n may lead to unpredictable behavior.",
                "id": "cpp/implicit-function-declaration",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/throw-in-destructor",
              "name": "cpp/throw-in-destructor",
              "shortDescription": {
                "text": "Exception thrown in destructor"
              },
              "fullDescription": {
                "text": "Throwing an exception from a destructor may cause immediate program termination."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Exception thrown in destructor",
                "description": "Throwing an exception from a destructor may cause immediate\n              program termination.",
                "id": "cpp/throw-in-destructor",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/virtual-destructor",
              "name": "cpp/virtual-destructor",
              "shortDescription": {
                "text": "Non-virtual destructor in base class"
              },
              "fullDescription": {
                "text": "All base classes with a virtual function should define a virtual destructor. If an application attempts to delete a derived class object through a base class pointer, the result is undefined if the base class destructor is non-virtual."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Non-virtual destructor in base class",
                "description": "All base classes with a virtual function should define a virtual destructor. If an application attempts to delete a derived class object through a base class pointer, the result is undefined if the base class destructor is non-virtual.",
                "id": "cpp/virtual-destructor",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/constructor-delegation",
              "name": "cpp/constructor-delegation",
              "shortDescription": {
                "text": "Incorrect constructor delegation"
              },
              "fullDescription": {
                "text": "A constructor in C++ cannot delegate part of the object initialization to another by calling it. This is likely to leave part of the object uninitialized."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "language-features"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Incorrect constructor delegation",
                "description": "A constructor in C++ cannot delegate part of the object\n              initialization to another by calling it. This is likely to\n              leave part of the object uninitialized.",
                "id": "cpp/constructor-delegation",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/compare-where-assign-meant",
              "name": "cpp/compare-where-assign-meant",
              "shortDescription": {
                "text": "Comparison where assignment was intended"
              },
              "fullDescription": {
                "text": "The '==' operator may have been used accidentally, where '=' was intended, resulting in a useless test."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "external/cwe/cwe-482"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Comparison where assignment was intended",
                "description": "The '==' operator may have been used accidentally, where '='\n              was intended, resulting in a useless test.",
                "id": "cpp/compare-where-assign-meant",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/inconsistent-loop-direction",
              "name": "cpp/inconsistent-loop-direction",
              "shortDescription": {
                "text": "Inconsistent direction of for loop"
              },
              "fullDescription": {
                "text": "A for-loop iteration expression goes backward with respect of the initialization statement and condition expression."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "correctness",
                  "external/cwe/cwe-835",
                  "external/microsoft/6293"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Inconsistent direction of for loop",
                "description": "A for-loop iteration expression goes backward with respect of the initialization statement and condition expression.",
                "msrc.severity": "important",
                "id": "cpp/inconsistent-loop-direction",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/empty-if",
              "name": "cpp/empty-if",
              "shortDescription": {
                "text": "Futile conditional"
              },
              "fullDescription": {
                "text": "An if-statement with an empty then-branch and no else-branch may indicate that the code is incomplete."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Futile conditional",
                "description": "An if-statement with an empty then-branch and no else-branch\n              may indicate that the code is incomplete.",
                "id": "cpp/empty-if",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/string-copy-return-value-as-boolean",
              "name": "cpp/string-copy-return-value-as-boolean",
              "shortDescription": {
                "text": "Use of string copy function in a condition"
              },
              "fullDescription": {
                "text": "The return value for strcpy, strncpy, or related string copy functions have no reserved return value to indicate an error. Using them in a condition is likely to be a logic error."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "external/microsoft/C6324",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Use of string copy function in a condition",
                "description": "The return value for strcpy, strncpy, or related string copy\n              functions have no reserved return value to indicate an error.\n              Using them in a condition is likely to be a logic error.",
                "id": "cpp/string-copy-return-value-as-boolean",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/assign-where-compare-meant",
              "name": "cpp/assign-where-compare-meant",
              "shortDescription": {
                "text": "Assignment where comparison was intended"
              },
              "fullDescription": {
                "text": "The '=' operator may have been used accidentally, where '==' was intended."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "external/cwe/cwe-481"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Assignment where comparison was intended",
                "description": "The '=' operator may have been used accidentally, where '=='\n              was intended.",
                "id": "cpp/assign-where-compare-meant",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/dubious-null-check",
              "name": "cpp/dubious-null-check",
              "shortDescription": {
                "text": "Dubious NULL check"
              },
              "fullDescription": {
                "text": "The address of a field (except the first) will never be NULL, so it is misleading, at best, to check for that case."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Dubious NULL check",
                "description": "The address of a field (except the first) will never be NULL,\n              so it is misleading, at best, to check for that case.",
                "id": "cpp/dubious-null-check",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/logical-operator-applied-to-flag",
              "name": "cpp/logical-operator-applied-to-flag",
              "shortDescription": {
                "text": "Short-circuiting operator applied to flag"
              },
              "fullDescription": {
                "text": "A short-circuiting logical operator is applied to what looks like a flag. This may be a typo for a bitwise operator."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "external/cwe/cwe-480"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Short-circuiting operator applied to flag",
                "description": "A short-circuiting logical operator is applied to what looks like a flag.\n              This may be a typo for a bitwise operator.",
                "id": "cpp/logical-operator-applied-to-flag",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/useless-expression",
              "name": "cpp/useless-expression",
              "shortDescription": {
                "text": "Expression has no effect"
              },
              "fullDescription": {
                "text": "A pure expression whose value is ignored is likely to be the result of a typo."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "correctness",
                  "external/cwe/cwe-561"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Expression has no effect",
                "description": "A pure expression whose value is ignored is likely to be the\n              result of a typo.",
                "id": "cpp/useless-expression",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/continue-in-false-loop",
              "name": "cpp/continue-in-false-loop",
              "shortDescription": {
                "text": "Continue statement that does not continue"
              },
              "fullDescription": {
                "text": "A 'continue' statement only re-runs the loop if the loop-condition is true. Therefore using 'continue' in a loop with a constant false condition is misleading and usually a bug."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Continue statement that does not continue",
                "description": "A 'continue' statement only re-runs the loop if the loop-condition is true. Therefore\n              using 'continue' in a loop with a constant false condition is misleading and usually\n              a bug.",
                "id": "cpp/continue-in-false-loop",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/bitwise-sign-check",
              "name": "cpp/bitwise-sign-check",
              "shortDescription": {
                "text": "Sign check of bitwise operation"
              },
              "fullDescription": {
                "text": "Checking the sign of a bitwise operation often has surprising edge cases."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Sign check of bitwise operation",
                "description": "Checking the sign of a bitwise operation often has surprising\n              edge cases.",
                "id": "cpp/bitwise-sign-check",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/constant-comparison",
              "name": "cpp/constant-comparison",
              "shortDescription": {
                "text": "Comparison result is always the same"
              },
              "fullDescription": {
                "text": "When a comparison operation, such as x < y, always returns the same result, it means that the comparison is redundant and may mask a bug because a different check was intended."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Comparison result is always the same",
                "description": "When a comparison operation, such as x < y, always\n              returns the same result, it means that the comparison\n              is redundant and may mask a bug because a different\n              check was intended.",
                "id": "cpp/constant-comparison",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/comparison-precedence",
              "name": "cpp/comparison-precedence",
              "shortDescription": {
                "text": "Unclear comparison precedence"
              },
              "fullDescription": {
                "text": "Using comparisons as operands of other comparisons is unusual in itself, and most readers will require parentheses to be sure of the precedence."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Unclear comparison precedence",
                "description": "Using comparisons as operands of other comparisons is unusual\n              in itself, and most readers will require parentheses to be sure\n              of the precedence.",
                "id": "cpp/comparison-precedence",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/comparison-of-identical-expressions",
              "name": "cpp/comparison-of-identical-expressions",
              "shortDescription": {
                "text": "Self comparison"
              },
              "fullDescription": {
                "text": "Comparing a variable to itself always produces the same result, unless the purpose is to check for integer overflow or floating point NaN."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "readability",
                  "maintainability"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Self comparison",
                "description": "Comparing a variable to itself always produces the\n              same result, unless the purpose is to check for\n              integer overflow or floating point NaN.",
                "id": "cpp/comparison-of-identical-expressions",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/equality-on-floats",
              "name": "cpp/equality-on-floats",
              "shortDescription": {
                "text": "Equality test on floating-point values"
              },
              "fullDescription": {
                "text": "Comparing results of floating-point computations with '==' or '!=' is likely to yield surprising results since floating-point computation does not follow the standard rules of algebra."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Equality test on floating-point values",
                "description": "Comparing results of floating-point computations with '==' or\n              '!=' is likely to yield surprising results since floating-point\n              computation does not follow the standard rules of algebra.",
                "id": "cpp/equality-on-floats",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/unsigned-comparison-zero",
              "name": "cpp/unsigned-comparison-zero",
              "shortDescription": {
                "text": "Unsigned comparison to zero"
              },
              "fullDescription": {
                "text": "An unsigned value is always non-negative, even if it has been assigned a negative number, so the comparison is redundant and may mask a bug because a different check was intended."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Unsigned comparison to zero",
                "description": "An unsigned value is always non-negative, even if it has been\n              assigned a negative number, so the comparison is redundant and\n              may mask a bug because a different check was intended.",
                "id": "cpp/unsigned-comparison-zero",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/fixme-comment",
              "name": "cpp/fixme-comment",
              "shortDescription": {
                "text": "FIXME comment"
              },
              "fullDescription": {
                "text": "Comments containing 'FIXME' indicate that the code has known bugs."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "documentation",
                  "external/cwe/cwe-546"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "FIXME comment",
                "description": "Comments containing 'FIXME' indicate that the code has known bugs.",
                "id": "cpp/fixme-comment",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/commented-out-code",
              "name": "cpp/commented-out-code",
              "shortDescription": {
                "text": "Commented-out code"
              },
              "fullDescription": {
                "text": "Commented-out code makes the remaining code more difficult to read."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "documentation"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Commented-out code",
                "description": "Commented-out code makes the remaining code more difficult to read.",
                "id": "cpp/commented-out-code",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/irregular-enum-init",
              "name": "cpp/irregular-enum-init",
              "shortDescription": {
                "text": "Irregular enum initialization"
              },
              "fullDescription": {
                "text": "In an enumerator list, the = construct should not be used to explicitly initialize members other than the first, unless all items are explicitly initialized. An exception is the pattern to use the last element of an enumerator list to get the number of possible values."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Irregular enum initialization",
                "description": "In an enumerator list, the = construct should not be used to explicitly initialize members other than the first, unless all items are explicitly initialized. An exception is the pattern to use the last element of an enumerator list to get the number of possible values.",
                "id": "cpp/irregular-enum-init",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/missing-header-guard",
              "name": "cpp/missing-header-guard",
              "shortDescription": {
                "text": "Missing header guard"
              },
              "fullDescription": {
                "text": "Header files should contain header guards (#defines to prevent the file from being included twice). This prevents errors and inefficiencies caused by repeated inclusion."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "efficiency",
                  "maintainability",
                  "modularity",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Missing header guard",
                "description": "Header files should contain header guards (#defines to prevent\n              the file from being included twice). This prevents errors and\n              inefficiencies caused by repeated inclusion.",
                "id": "cpp/missing-header-guard",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/sizeof-side-effect",
              "name": "cpp/sizeof-side-effect",
              "shortDescription": {
                "text": "Sizeof with side effects"
              },
              "fullDescription": {
                "text": "The sizeof operator should not be used on expressions that contain side effects. It is subtle whether the side effects will occur or not."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Sizeof with side effects",
                "description": "The sizeof operator should not be used on expressions that contain side effects. It is subtle whether the side effects will occur or not.",
                "id": "cpp/sizeof-side-effect",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/missing-return",
              "name": "cpp/missing-return",
              "shortDescription": {
                "text": "Missing return statement"
              },
              "fullDescription": {
                "text": "All functions that are not void should return a value on every exit path."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Missing return statement",
                "description": "All functions that are not void should return a value on every exit path.",
                "id": "cpp/missing-return",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/function-in-block",
              "name": "cpp/function-in-block",
              "shortDescription": {
                "text": "Function declared in block"
              },
              "fullDescription": {
                "text": "Functions should always be declared at file scope. It is confusing to declare a function at block scope, and the visibility of the function is not what would be expected."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "very-high",
                "name": "Function declared in block",
                "description": "Functions should always be declared at file scope. It is confusing to declare a function at block scope, and the visibility of the function is not what would be expected.",
                "id": "cpp/function-in-block",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/include-non-header",
              "name": "cpp/include-non-header",
              "shortDescription": {
                "text": "Include header files only"
              },
              "fullDescription": {
                "text": "The #include pre-processor directive should only be used to include header files."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "modularity",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Include header files only",
                "description": "The #include pre-processor directive should only be used to include header files.",
                "id": "cpp/include-non-header",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/loop-variable-changed",
              "name": "cpp/loop-variable-changed",
              "shortDescription": {
                "text": "For loop variable changed in body"
              },
              "fullDescription": {
                "text": "Numeric variables being used within a for loop for iteration counting should not be modified in the body of the loop. Reserve for loops for straightforward iterations, and use a while loop instead for more complex cases."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "For loop variable changed in body",
                "description": "Numeric variables being used within a for loop for iteration counting should not be modified in the body of the loop. Reserve for loops for straightforward iterations, and use a while loop instead for more complex cases.",
                "id": "cpp/loop-variable-changed",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/loop-variable-float",
              "name": "cpp/loop-variable-float",
              "shortDescription": {
                "text": "Avoid floats in for loops"
              },
              "fullDescription": {
                "text": "Floating point variables should not be used as loop counters. For loops are best suited to simple increments and termination conditions; while loops are preferable for more complex uses."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "correctness",
                  "reliability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Avoid floats in for loops",
                "description": "Floating point variables should not be used as loop counters. For loops are best suited to simple increments and termination conditions; while loops are preferable for more complex uses.",
                "id": "cpp/loop-variable-float",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/trivial-switch",
              "name": "cpp/trivial-switch",
              "shortDescription": {
                "text": "No trivial switch statements"
              },
              "fullDescription": {
                "text": "Using a switch statement when there are fewer than two non-default cases leads to unclear code."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "No trivial switch statements",
                "description": "Using a switch statement when there are fewer than two non-default cases leads to unclear code.",
                "id": "cpp/trivial-switch",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/resource-not-released-in-destructor",
              "name": "cpp/resource-not-released-in-destructor",
              "shortDescription": {
                "text": "Resource not released in destructor"
              },
              "fullDescription": {
                "text": "All resources acquired by a class should be released by its destructor. Avoid the use of the 'open / close' pattern, since C++ constructors and destructors provide a safer way to handle resource acquisition and release. Best practice in C++ is to use the 'RAII' technique: constructors allocate resources and destructors free them."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "efficiency",
                  "readability",
                  "external/cwe/cwe-404",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Resource not released in destructor",
                "description": "All resources acquired by a class should be released by its destructor. Avoid the use of the 'open / close' pattern, since C++ constructors and destructors provide a safer way to handle resource acquisition and release. Best practice in C++ is to use the 'RAII' technique: constructors allocate resources and destructors free them.",
                "id": "cpp/resource-not-released-in-destructor",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/redefined-default-parameter",
              "name": "cpp/redefined-default-parameter",
              "shortDescription": {
                "text": "Redefined default parameter"
              },
              "fullDescription": {
                "text": "An inherited default parameter shall never be redefined. Default values are bound statically which is confusing when combined with dynamically bound function calls."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Redefined default parameter",
                "description": "An inherited default parameter shall never be redefined. Default values are bound statically which is confusing when combined with dynamically bound function calls.",
                "id": "cpp/redefined-default-parameter",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/inconsistent-virtual-inheritance",
              "name": "cpp/inconsistent-virtual-inheritance",
              "shortDescription": {
                "text": "Inconsistent virtual inheritance"
              },
              "fullDescription": {
                "text": "A base class shall not be both virtual and non-virtual in the same hierarchy."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Inconsistent virtual inheritance",
                "description": "A base class shall not be both virtual and non-virtual in the same hierarchy.",
                "id": "cpp/inconsistent-virtual-inheritance",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/array-in-interface",
              "name": "cpp/array-in-interface",
              "shortDescription": {
                "text": "No raw arrays in interfaces"
              },
              "fullDescription": {
                "text": "Arrays should not be used in interfaces. Arrays degenerate to pointers when passed as parameters. This array decay problem has long been known to be a source of errors. Consider using std::vector or encapsulating the array in an Array class."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "No raw arrays in interfaces",
                "description": "Arrays should not be used in interfaces. Arrays degenerate to pointers when passed as parameters. This array decay problem has long been known to be a source of errors. Consider using std::vector or encapsulating the array in an Array class.",
                "id": "cpp/array-in-interface",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/assignment-does-not-return-this",
              "name": "cpp/assignment-does-not-return-this",
              "shortDescription": {
                "text": "Overloaded assignment does not return 'this'"
              },
              "fullDescription": {
                "text": "An assignment operator should return a reference to *this. Both the standard library types and the built-in types behave in this manner."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Overloaded assignment does not return 'this'",
                "description": "An assignment operator should return a reference to *this. Both the standard library types and the built-in types behave in this manner.",
                "id": "cpp/assignment-does-not-return-this",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/undisciplined-multiple-inheritance",
              "name": "cpp/undisciplined-multiple-inheritance",
              "shortDescription": {
                "text": "Undisciplined multiple inheritance"
              },
              "fullDescription": {
                "text": "Multiple inheritance should only be used in the following restricted form: n interfaces plus m private implementations, plus at most one protected implementation. Multiple inheritance can lead to complicated inheritance hierarchies that are difficult to comprehend and maintain."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Undisciplined multiple inheritance",
                "description": "Multiple inheritance should only be used in the following restricted form: n interfaces plus m private implementations, plus at most one protected implementation. Multiple inheritance can lead to complicated inheritance hierarchies that are difficult to comprehend and maintain.",
                "id": "cpp/undisciplined-multiple-inheritance",
                "problem.severity": "recommendation"
              }
            },
            {
              "id": "cpp/virtual-call-in-constructor",
              "name": "cpp/virtual-call-in-constructor",
              "shortDescription": {
                "text": "Virtual call from constructor or destructor"
              },
              "fullDescription": {
                "text": "Virtual functions should not be invoked from a constructor or destructor of the same class. Confusingly, virtual functions are resolved statically (not dynamically) in constructors and destructors for the same class. The call should be made explicitly static by qualifying it using the scope resolution operator."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "readability",
                  "language-features",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Virtual call from constructor or destructor",
                "description": "Virtual functions should not be invoked from a constructor or destructor of the same class. Confusingly, virtual functions are resolved statically (not dynamically) in constructors and destructors for the same class. The call should be made explicitly static by qualifying it using the scope resolution operator.",
                "id": "cpp/virtual-call-in-constructor",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/duplicate-include-guard",
              "name": "cpp/duplicate-include-guard",
              "shortDescription": {
                "text": "Duplicate include guard"
              },
              "fullDescription": {
                "text": "Using the same include guard macro in more than one header file may cause unexpected behavior from the compiler."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "maintainability",
                  "modularity"
                ],
                "kind": "problem",
                "precision": "high",
                "name": "Duplicate include guard",
                "description": "Using the same include guard macro in more than one header file may cause unexpected behavior from the compiler.",
                "id": "cpp/duplicate-include-guard",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/static-buffer-overflow",
              "name": "cpp/static-buffer-overflow",
              "shortDescription": {
                "text": "Static array access may cause overflow"
              },
              "fullDescription": {
                "text": "Exceeding the size of a static array during write or access operations may result in a buffer overflow."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-119",
                  "external/cwe/cwe-131"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Static array access may cause overflow",
                "description": "Exceeding the size of a static array during write or access operations\n              may result in a buffer overflow.",
                "id": "cpp/static-buffer-overflow",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/allocation-too-small",
              "name": "cpp/allocation-too-small",
              "shortDescription": {
                "text": "Not enough memory allocated for pointer type"
              },
              "fullDescription": {
                "text": "Calling 'malloc', 'calloc' or 'realloc' without allocating enough memory to contain an instance of the type of the pointer may result in a buffer overflow"
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-131",
                  "external/cwe/cwe-122"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Not enough memory allocated for pointer type",
                "description": "Calling 'malloc', 'calloc' or 'realloc' without allocating enough memory to contain\n              an instance of the type of the pointer may result in a buffer overflow",
                "id": "cpp/allocation-too-small",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/suspicious-allocation-size",
              "name": "cpp/suspicious-allocation-size",
              "shortDescription": {
                "text": "Not enough memory allocated for array of pointer type"
              },
              "fullDescription": {
                "text": "Calling 'malloc', 'calloc' or 'realloc' without allocating enough memory to contain multiple instances of the type of the pointer may result in a buffer overflow"
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-131",
                  "external/cwe/cwe-122"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Not enough memory allocated for array of pointer type",
                "description": "Calling 'malloc', 'calloc' or 'realloc' without allocating enough memory to contain\n              multiple instances of the type of the pointer may result in a buffer overflow",
                "id": "cpp/suspicious-allocation-size",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/offset-use-before-range-check",
              "name": "cpp/offset-use-before-range-check",
              "shortDescription": {
                "text": "Array offset used before range check"
              },
              "fullDescription": {
                "text": "Accessing an array offset before checking the range means that the program may attempt to read beyond the end of a buffer"
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-125"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Array offset used before range check",
                "description": "Accessing an array offset before checking the range means that\n              the program may attempt to read beyond the end of a buffer",
                "id": "cpp/offset-use-before-range-check",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/leap-year/adding-365-days-per-year",
              "name": "cpp/leap-year/adding-365-days-per-year",
              "shortDescription": {
                "text": "Arithmetic operation assumes 365 days per year"
              },
              "fullDescription": {
                "text": "When an arithmetic operation modifies a date by a constant value of 365, it may be a sign that leap years are not taken into account."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "leap-year",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Arithmetic operation assumes 365 days per year",
                "description": "When an arithmetic operation modifies a date by a constant\n              value of 365, it may be a sign that leap years are not taken\n              into account.",
                "id": "cpp/leap-year/adding-365-days-per-year",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/leap-year/unchecked-after-arithmetic-year-modification",
              "name": "cpp/leap-year/unchecked-after-arithmetic-year-modification",
              "shortDescription": {
                "text": "Year field changed using an arithmetic operation without checking for leap year"
              },
              "fullDescription": {
                "text": "A field that represents a year is being modified by an arithmetic operation, but no proper check for leap years can be detected afterwards."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "leap-year",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Year field changed using an arithmetic operation without checking for leap year",
                "description": "A field that represents a year is being modified by an arithmetic operation, but no proper check for leap years can be detected afterwards.",
                "id": "cpp/leap-year/unchecked-after-arithmetic-year-modification",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/leap-year/unchecked-return-value-for-time-conversion-function",
              "name": "cpp/leap-year/unchecked-return-value-for-time-conversion-function",
              "shortDescription": {
                "text": "Unchecked return value for time conversion function"
              },
              "fullDescription": {
                "text": "When the return value of a fallible time conversion function is not checked for failure, its output parameters may contain invalid dates."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "leap-year",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Unchecked return value for time conversion function",
                "description": "When the return value of a fallible time conversion function is\n              not checked for failure, its output parameters may contain\n              invalid dates.",
                "id": "cpp/leap-year/unchecked-return-value-for-time-conversion-function",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/unsafe-strncat",
              "name": "cpp/unsafe-strncat",
              "shortDescription": {
                "text": "Potentially unsafe call to strncat"
              },
              "fullDescription": {
                "text": "Calling 'strncat' with the size of the destination buffer as the third argument may result in a buffer overflow."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-676",
                  "external/cwe/cwe-119",
                  "external/cwe/cwe-251"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Potentially unsafe call to strncat",
                "description": "Calling 'strncat' with the size of the destination buffer\n              as the third argument may result in a buffer overflow.",
                "id": "cpp/unsafe-strncat",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/stack-address-escape",
              "name": "cpp/stack-address-escape",
              "shortDescription": {
                "text": "Local variable address stored in non-local memory"
              },
              "fullDescription": {
                "text": "Storing the address of a local variable in non-local memory can cause a dangling pointer bug if the address is used after the function returns."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Local variable address stored in non-local memory",
                "description": "Storing the address of a local variable in non-local\n              memory can cause a dangling pointer bug if the address\n              is used after the function returns.",
                "id": "cpp/stack-address-escape",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/bad-strncpy-size",
              "name": "cpp/bad-strncpy-size",
              "shortDescription": {
                "text": "Possibly wrong buffer size in string copy"
              },
              "fullDescription": {
                "text": "Calling 'strncpy' with the size of the source buffer as the third argument may result in a buffer overflow."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-676",
                  "external/cwe/cwe-119",
                  "external/cwe/cwe-251"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Possibly wrong buffer size in string copy",
                "description": "Calling 'strncpy' with the size of the source buffer\n              as the third argument may result in a buffer overflow.",
                "id": "cpp/bad-strncpy-size",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/uninitialized-local",
              "name": "cpp/uninitialized-local",
              "shortDescription": {
                "text": "Potentially uninitialized local variable"
              },
              "fullDescription": {
                "text": "Reading from a local variable that has not been assigned to will typically yield garbage."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-665",
                  "external/cwe/cwe-457"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Potentially uninitialized local variable",
                "description": "Reading from a local variable that has not been assigned to\n              will typically yield garbage.",
                "id": "cpp/uninitialized-local",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/unsafe-strcat",
              "name": "cpp/unsafe-strcat",
              "shortDescription": {
                "text": "Potentially unsafe use of strcat"
              },
              "fullDescription": {
                "text": "Using 'strcat' without checking the size of the source string may result in a buffer overflow"
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-676",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-251"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Potentially unsafe use of strcat",
                "description": "Using 'strcat' without checking the size of the source string\n              may result in a buffer overflow",
                "id": "cpp/unsafe-strcat",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/suspicious-sizeof",
              "name": "cpp/suspicious-sizeof",
              "shortDescription": {
                "text": "Suspicious 'sizeof' use"
              },
              "fullDescription": {
                "text": "Taking 'sizeof' of an array parameter is often mistakenly thought to yield the size of the underlying array, but it always yields the machine pointer size."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "security",
                  "external/cwe/cwe-467"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Suspicious 'sizeof' use",
                "description": "Taking 'sizeof' of an array parameter is often mistakenly thought\n              to yield the size of the underlying array, but it always yields\n              the machine pointer size.",
                "id": "cpp/suspicious-sizeof",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/nested-loops-with-same-variable",
              "name": "cpp/nested-loops-with-same-variable",
              "shortDescription": {
                "text": "Nested loops with same variable"
              },
              "fullDescription": {
                "text": "When a nested loop uses the same iteration variable as its outer loop, the behavior of the outer loop easily becomes difficult to understand as the inner loop will affect its control flow. It is likely to be a typo."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "correctness"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Nested loops with same variable",
                "description": "When a nested loop uses the same iteration variable as its outer loop, the\n   behavior of the outer loop easily becomes difficult to understand as the\n   inner loop will affect its control flow. It is likely to be a typo.",
                "id": "cpp/nested-loops-with-same-variable",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/lossy-function-result-cast",
              "name": "cpp/lossy-function-result-cast",
              "shortDescription": {
                "text": "Lossy function result cast"
              },
              "fullDescription": {
                "text": "Finds function calls whose result type is a floating point type, and which are casted to an integral type. Includes only expressions with implicit cast and excludes function calls to ceil, floor and round."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Lossy function result cast",
                "description": "Finds function calls whose result type is a floating point type, and which are casted to an integral type.\n              Includes only expressions with implicit cast and excludes function calls to ceil, floor and round.",
                "id": "cpp/lossy-function-result-cast",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/mistyped-function-arguments",
              "name": "cpp/mistyped-function-arguments",
              "shortDescription": {
                "text": "Call to a function with one or more incompatible arguments"
              },
              "fullDescription": {
                "text": "When the type of a function argument is not compatible with the type of the corresponding parameter, it may lead to unpredictable behavior."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "correctness",
                  "maintainability"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Call to a function with one or more incompatible arguments",
                "description": "When the type of a function argument is not compatible\n with the type of the corresponding parameter, it may lead to\n unpredictable behavior.",
                "id": "cpp/mistyped-function-arguments",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/inconsistent-null-check",
              "name": "cpp/inconsistent-null-check",
              "shortDescription": {
                "text": "Inconsistent nullness check"
              },
              "fullDescription": {
                "text": "The result value of a function is often checked for nullness, but not always. Since the value is mostly checked, it is likely that the function can return null values in some cases, and omitting the check could crash the program."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "statistical",
                  "non-attributable",
                  "external/cwe/cwe-476"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Inconsistent nullness check",
                "description": "The result value of a function is often checked for nullness,\n              but not always. Since the value is mostly checked, it is likely\n              that the function can return null values in some cases, and\n              omitting the check could crash the program.",
                "id": "cpp/inconsistent-null-check",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/inconsistent-call-on-result",
              "name": "cpp/inconsistent-call-on-result",
              "shortDescription": {
                "text": "Inconsistent operation on return value"
              },
              "fullDescription": {
                "text": "A function is called, and the same operation is usually performed on the return value - for example, free, delete, close etc. However, in some cases it is not performed. These unusual cases may indicate misuse of the API and could cause resource leaks."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "statistical",
                  "non-attributable",
                  "external/cwe/cwe-252"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Inconsistent operation on return value",
                "description": "A function is called, and the same operation is usually performed on the return value - for example, free, delete, close etc. However, in some cases it is not performed. These unusual cases may indicate misuse of the API and could cause resource leaks.",
                "id": "cpp/inconsistent-call-on-result",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/incorrect-not-operator-usage",
              "name": "cpp/incorrect-not-operator-usage",
              "shortDescription": {
                "text": "Incorrect 'not' operator usage"
              },
              "fullDescription": {
                "text": "Usage of a logical-not (!) operator as an operand for a bit-wise operation. This commonly indicates the usage of an incorrect operator instead of the bit-wise not (~) operator, also known as ones' complement operator."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-480",
                  "external/microsoft/c6317"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Incorrect 'not' operator usage",
                "description": "Usage of a logical-not (!) operator as an operand for a bit-wise operation.\n              This commonly indicates the usage of an incorrect operator instead of the bit-wise not (~) operator,\n              also known as ones' complement operator.",
                "id": "cpp/incorrect-not-operator-usage",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/missing-case-in-switch",
              "name": "cpp/missing-case-in-switch",
              "shortDescription": {
                "text": "Missing enum case in switch"
              },
              "fullDescription": {
                "text": "A switch statement over an enum type is missing a case for some enum constant and does not have a default case. This may cause logic errors."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "external/cwe/cwe-478"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Missing enum case in switch",
                "description": "A switch statement over an enum type is missing a case for some enum constant\n              and does not have a default case. This may cause logic errors.",
                "id": "cpp/missing-case-in-switch",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/incomplete-parity-check",
              "name": "cpp/incomplete-parity-check",
              "shortDescription": {
                "text": "Bad check for oddness"
              },
              "fullDescription": {
                "text": "Using \"x % 2 == 1\" to check whether x is odd does not work for negative numbers."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "correctness",
                  "types"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Bad check for oddness",
                "description": "Using \"x % 2 == 1\" to check whether x is odd does not work for\n              negative numbers.",
                "id": "cpp/incomplete-parity-check",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/cleartext-storage-buffer",
              "name": "cpp/cleartext-storage-buffer",
              "shortDescription": {
                "text": "Cleartext storage of sensitive information in buffer"
              },
              "fullDescription": {
                "text": "Storing sensitive information in cleartext can expose it to an attacker."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-312"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Cleartext storage of sensitive information in buffer",
                "description": "Storing sensitive information in cleartext can expose it\n              to an attacker.",
                "id": "cpp/cleartext-storage-buffer",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/cleartext-storage-file",
              "name": "cpp/cleartext-storage-file",
              "shortDescription": {
                "text": "Cleartext storage of sensitive information in file"
              },
              "fullDescription": {
                "text": "Storing sensitive information in cleartext can expose it to an attacker."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-313"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Cleartext storage of sensitive information in file",
                "description": "Storing sensitive information in cleartext can expose it\n              to an attacker.",
                "id": "cpp/cleartext-storage-file",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/overrunning-write",
              "name": "cpp/overrunning-write",
              "shortDescription": {
                "text": "Potentially overrunning write"
              },
              "fullDescription": {
                "text": "Buffer write operations that do not control the length of data written may overflow."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-787",
                  "external/cwe/cwe-805"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Potentially overrunning write",
                "description": "Buffer write operations that do not control the length\n              of data written may overflow.",
                "id": "cpp/overrunning-write",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/overrunning-write-with-float",
              "name": "cpp/overrunning-write-with-float",
              "shortDescription": {
                "text": "Potentially overrunning write with float to string conversion"
              },
              "fullDescription": {
                "text": "Buffer write operations that do not control the length of data written may overflow when floating point inputs take extreme values."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-787",
                  "external/cwe/cwe-805"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Potentially overrunning write with float to string conversion",
                "description": "Buffer write operations that do not control the length\n              of data written may overflow when floating point inputs\n              take extreme values.",
                "id": "cpp/overrunning-write-with-float",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/unbounded-write",
              "name": "cpp/unbounded-write",
              "shortDescription": {
                "text": "Unbounded write"
              },
              "fullDescription": {
                "text": "Buffer write operations that do not control the length of data written may overflow."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-120",
                  "external/cwe/cwe-787",
                  "external/cwe/cwe-805"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Unbounded write",
                "description": "Buffer write operations that do not control the length\n              of data written may overflow.",
                "id": "cpp/unbounded-write",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/weak-cryptographic-algorithm",
              "name": "cpp/weak-cryptographic-algorithm",
              "shortDescription": {
                "text": "Use of a broken or risky cryptographic algorithm"
              },
              "fullDescription": {
                "text": "Using broken or weak cryptographic algorithms can allow an attacker to compromise security."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-327"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Use of a broken or risky cryptographic algorithm",
                "description": "Using broken or weak cryptographic algorithms can allow\n              an attacker to compromise security.",
                "id": "cpp/weak-cryptographic-algorithm",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/tainted-permissions-check",
              "name": "cpp/tainted-permissions-check",
              "shortDescription": {
                "text": "Untrusted input for a condition"
              },
              "fullDescription": {
                "text": "Using untrusted inputs in a statement that makes a security decision makes code vulnerable to attack."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-807"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Untrusted input for a condition",
                "description": "Using untrusted inputs in a statement that makes a\n              security decision makes code vulnerable to\n              attack.",
                "id": "cpp/tainted-permissions-check",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/suspicious-pointer-scaling-void",
              "name": "cpp/suspicious-pointer-scaling-void",
              "shortDescription": {
                "text": "Suspicious pointer scaling to void"
              },
              "fullDescription": {
                "text": "Implicit scaling of pointer arithmetic expressions can cause buffer overflow conditions."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-468"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Suspicious pointer scaling to void",
                "description": "Implicit scaling of pointer arithmetic expressions\n              can cause buffer overflow conditions.",
                "id": "cpp/suspicious-pointer-scaling-void",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/suspicious-pointer-scaling",
              "name": "cpp/suspicious-pointer-scaling",
              "shortDescription": {
                "text": "Suspicious pointer scaling"
              },
              "fullDescription": {
                "text": "Implicit scaling of pointer arithmetic expressions can cause buffer overflow conditions."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-468"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Suspicious pointer scaling",
                "description": "Implicit scaling of pointer arithmetic expressions\n              can cause buffer overflow conditions.",
                "id": "cpp/suspicious-pointer-scaling",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/cleartext-storage-database",
              "name": "cpp/cleartext-storage-database",
              "shortDescription": {
                "text": "Cleartext storage of sensitive information in an SQLite database"
              },
              "fullDescription": {
                "text": "Storing sensitive information in a non-encrypted database can expose it to an attacker."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-313"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Cleartext storage of sensitive information in an SQLite database",
                "description": "Storing sensitive information in a non-encrypted\n              database can expose it to an attacker.",
                "id": "cpp/cleartext-storage-database",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/user-controlled-bypass",
              "name": "cpp/user-controlled-bypass",
              "shortDescription": {
                "text": "Authentication bypass by spoofing"
              },
              "fullDescription": {
                "text": "Authentication by checking that the peer's address matches a known IP or web address is unsafe as it is vulnerable to spoofing attacks."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-290"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Authentication bypass by spoofing",
                "description": "Authentication by checking that the peer's address\n              matches a known IP or web address is unsafe as it is\n              vulnerable to spoofing attacks.",
                "id": "cpp/user-controlled-bypass",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/unsafe-create-process-call",
              "name": "cpp/unsafe-create-process-call",
              "shortDescription": {
                "text": "NULL application name with an unquoted path in call to CreateProcess"
              },
              "fullDescription": {
                "text": "Calling a function of the CreateProcess* family of functions, where the path contains spaces, introduces a security vulnerability."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-428",
                  "external/microsoft/C6277"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "NULL application name with an unquoted path in call to CreateProcess",
                "description": "Calling a function of the CreateProcess* family of functions, where the path contains spaces, introduces a security vulnerability.",
                "msrc.severity": "important",
                "id": "cpp/unsafe-create-process-call",
                "problem.severity": "error"
              }
            },
            {
              "id": "cpp/unterminated-variadic-call",
              "name": "cpp/unterminated-variadic-call",
              "shortDescription": {
                "text": "Unterminated variadic call"
              },
              "fullDescription": {
                "text": "Calling a variadic function without a sentinel value may result in a buffer overflow if the function expects a specific value to terminate the argument list."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "reliability",
                  "security",
                  "external/cwe/cwe-121"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Unterminated variadic call",
                "description": "Calling a variadic function without a sentinel value\n              may result in a buffer overflow if the function expects\n              a specific value to terminate the argument list.",
                "id": "cpp/unterminated-variadic-call",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/uncontrolled-arithmetic",
              "name": "cpp/uncontrolled-arithmetic",
              "shortDescription": {
                "text": "Uncontrolled data in arithmetic expression"
              },
              "fullDescription": {
                "text": "Arithmetic operations on uncontrolled data that is not validated can cause overflows."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-190",
                  "external/cwe/cwe-191"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Uncontrolled data in arithmetic expression",
                "description": "Arithmetic operations on uncontrolled data that is not\n              validated can cause overflows.",
                "id": "cpp/uncontrolled-arithmetic",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/uncontrolled-process-operation",
              "name": "cpp/uncontrolled-process-operation",
              "shortDescription": {
                "text": "Uncontrolled process operation"
              },
              "fullDescription": {
                "text": "Using externally controlled strings in a process operation can allow an attacker to execute malicious commands."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-114"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Uncontrolled process operation",
                "description": "Using externally controlled strings in a process\n              operation can allow an attacker to execute malicious\n              commands.",
                "id": "cpp/uncontrolled-process-operation",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/path-injection",
              "name": "cpp/path-injection",
              "shortDescription": {
                "text": "Uncontrolled data used in path expression"
              },
              "fullDescription": {
                "text": "Accessing paths influenced by users can allow an attacker to access unexpected resources."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-022",
                  "external/cwe/cwe-023",
                  "external/cwe/cwe-036",
                  "external/cwe/cwe-073"
                ],
                "kind": "path-problem",
                "precision": "medium",
                "name": "Uncontrolled data used in path expression",
                "description": "Accessing paths influenced by users can allow an\n              attacker to access unexpected resources.",
                "id": "cpp/path-injection",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/toctou-race-condition",
              "name": "cpp/toctou-race-condition",
              "shortDescription": {
                "text": "Time-of-check time-of-use filesystem race condition"
              },
              "fullDescription": {
                "text": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-367"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Time-of-check time-of-use filesystem race condition",
                "description": "Separately checking the state of a file before operating\n              on it may allow an attacker to modify the file between\n              the two operations.",
                "id": "cpp/toctou-race-condition",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/world-writable-file-creation",
              "name": "cpp/world-writable-file-creation",
              "shortDescription": {
                "text": "File created without restricting permissions"
              },
              "fullDescription": {
                "text": "Creating a file that is world-writable can allow an attacker to write to the file."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "security",
                  "external/cwe/cwe-732"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "File created without restricting permissions",
                "description": "Creating a file that is world-writable can allow an attacker to write to the file.",
                "id": "cpp/world-writable-file-creation",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/poorly-documented-function",
              "name": "cpp/poorly-documented-function",
              "shortDescription": {
                "text": "Poorly documented large function"
              },
              "fullDescription": {
                "text": "Large functions that have no or almost no comments are likely to be too complex to understand and maintain. The larger a function is, the more problematic the lack of comments."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "documentation",
                  "statistical",
                  "non-attributable"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Poorly documented large function",
                "description": "Large functions that have no or almost no comments are likely to be too complex to understand and maintain. The larger a function is, the more problematic the lack of comments.",
                "id": "cpp/poorly-documented-function",
                "problem.severity": "warning"
              }
            },
            {
              "id": "cpp/integer-used-for-enum",
              "name": "cpp/integer-used-for-enum",
              "shortDescription": {
                "text": "Use of integer where enum is preferred"
              },
              "fullDescription": {
                "text": "Enumeration types should be used instead of integer types (and constants) to select from a limited series of choices."
              },
              "defaultConfiguration": {},
              "properties": {
                "tags": [
                  "maintainability",
                  "readability",
                  "language-features",
                  "external/jsf"
                ],
                "kind": "problem",
                "precision": "medium",
                "name": "Use of integer where enum is preferred",
                "description": "Enumeration types should be used instead of integer types (and constants) to select from a limited series of choices.",
                "id": "cpp/integer-used-for-enum",
                "problem.severity": "warning"
              }
            }
          ]
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "moc_o1.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 0
          }
        },
        {
          "location": {
            "uri": "moc_o2.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 1
          }
        },
        {
          "location": {
            "uri": "moc_o2settingsstore.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 2
          }
        },
        {
          "location": {
            "uri": "moc_oxtwitter.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 3
          }
        },
        {
          "location": {
            "uri": "o2/o1flickr.h",
            "uriBaseId": "%SRCROOT%",
            "index": 4
          }
        },
        {
          "location": {
            "uri": "o2/o1requestor.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 5
          }
        },
        {
          "location": {
            "uri": "o2/o2facebook.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 6
          }
        },
        {
          "location": {
            "uri": "o2/o2replyserver.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 7
          }
        },
        {
          "location": {
            "uri": "o2/o1.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 8
          }
        },
        {
          "location": {
            "uri": "o2/o2.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 9
          }
        },
        {
          "location": {
            "uri": "activitylistmodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 10
          }
        },
        {
          "location": {
            "uri": "likemodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 11
          }
        },
        {
          "location": {
            "uri": "playlistmodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 12
          }
        },
        {
          "location": {
            "uri": "playlistsoundlistmodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 13
          }
        },
        {
          "location": {
            "uri": "moc_activitylistmodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 14
          }
        },
        {
          "location": {
            "uri": "moc_enterusernamewidget.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 15
          }
        },
        {
          "location": {
            "uri": "moc_introwidget.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 16
          }
        },
        {
          "location": {
            "uri": "moc_likemodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 17
          }
        },
        {
          "location": {
            "uri": "moc_o1requestor.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 18
          }
        },
        {
          "location": {
            "uri": "moc_o2reply.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 19
          }
        },
        {
          "location": {
            "uri": "moc_o2requestor.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 20
          }
        },
        {
          "location": {
            "uri": "moc_playbackmanager.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 21
          }
        },
        {
          "location": {
            "uri": "moc_playlistmodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 22
          }
        },
        {
          "location": {
            "uri": "moc_playlistsoundlistmodel.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 23
          }
        },
        {
          "location": {
            "uri": "moc_soundcloudapi.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 24
          }
        },
        {
          "location": {
            "uri": "moc_soundstorage.cpp",
            "uriBaseId": "%SRCROOT%",
            "index": 25
          }
        },
        {
          "location": {
            "uri": "o1requestor.moc",
            "uriBaseId": "%SRCROOT%",
            "index": 26
          }
        }
      ],
      "results": [
        {
          "ruleId": "cpp/empty-block",
          "ruleIndex": 38,
          "message": {
            "text": "Empty block without comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 0
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 50,
                  "endLine": 320,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "18f082009fc32c68:1",
            "primaryLocationStartColumnFingerprint": "45"
          }
        },
        {
          "ruleId": "cpp/empty-block",
          "ruleIndex": 38,
          "message": {
            "text": "Empty block without comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 1
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 50,
                  "endLine": 401,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1b68992305359da5:1",
            "primaryLocationStartColumnFingerprint": "45"
          }
        },
        {
          "ruleId": "cpp/empty-block",
          "ruleIndex": 38,
          "message": {
            "text": "Empty block without comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2settingsstore.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 2
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 50,
                  "endLine": 110,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e4453a1f51a22df8:1",
            "primaryLocationStartColumnFingerprint": "45"
          }
        },
        {
          "ruleId": "cpp/empty-block",
          "ruleIndex": 38,
          "message": {
            "text": "Empty block without comment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_oxtwitter.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 3
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 50,
                  "endLine": 134,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e4453a1f51a22df8:1",
            "primaryLocationStartColumnFingerprint": "45"
          }
        },
        {
          "ruleId": "cpp/empty-if",
          "ruleIndex": 67,
          "message": {
            "text": "If-statement with an empty then-branch and no else-branch."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 0
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 12,
                  "endLine": 320,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "18f082009fc32c68:1",
            "primaryLocationStartColumnFingerprint": "7"
          }
        },
        {
          "ruleId": "cpp/empty-if",
          "ruleIndex": 67,
          "message": {
            "text": "If-statement with an empty then-branch and no else-branch."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 1
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 12,
                  "endLine": 401,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1b68992305359da5:1",
            "primaryLocationStartColumnFingerprint": "7"
          }
        },
        {
          "ruleId": "cpp/empty-if",
          "ruleIndex": 67,
          "message": {
            "text": "If-statement with an empty then-branch and no else-branch."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2settingsstore.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 2
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 12,
                  "endLine": 110,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e4453a1f51a22df8:1",
            "primaryLocationStartColumnFingerprint": "7"
          }
        },
        {
          "ruleId": "cpp/empty-if",
          "ruleIndex": 67,
          "message": {
            "text": "If-statement with an empty then-branch and no else-branch."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_oxtwitter.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 3
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 12,
                  "endLine": 134,
                  "endColumn": 6
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e4453a1f51a22df8:1",
            "primaryLocationStartColumnFingerprint": "7"
          }
        },
        {
          "ruleId": "cpp/fixme-comment",
          "ruleIndex": 80,
          "message": {
            "text": "FIXME comment: Really needed?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o1flickr.h",
                  "uriBaseId": "%SRCROOT%",
                  "index": 4
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 29,
                  "endColumn": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "f94beaa7218979fa:1",
            "primaryLocationStartColumnFingerprint": "20"
          }
        },
        {
          "ruleId": "cpp/fixme-comment",
          "ruleIndex": 80,
          "message": {
            "text": "FIXME comment: Expose me"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o1requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 5
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 33,
                  "endColumn": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d440161902431084:1",
            "primaryLocationStartColumnFingerprint": "24"
          }
        },
        {
          "ruleId": "cpp/fixme-comment",
          "ruleIndex": 80,
          "message": {
            "text": "FIXME comment: Delete relevant cookies, too"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o2facebook.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 6
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endColumn": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "bd77fce93168a8fc:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/fixme-comment",
          "ruleIndex": 80,
          "message": {
            "text": "FIXME comment: We are decoding key and value again. This helps with Google OAuth, but is it mandated by the standard?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o2replyserver.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 7
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 9,
                  "endColumn": 121
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b40eb64e4b5b4687:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/commented-out-code",
          "ruleIndex": 81,
          "message": {
            "text": "This comment appears to contain commented-out code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o1.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 8
                },
                "region": {
                  "startLine": 18,
                  "endColumn": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e9a27fb34e029c3e:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/commented-out-code",
          "ruleIndex": 81,
          "message": {
            "text": "This comment appears to contain commented-out code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 9
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 5,
                  "endColumn": 115
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6051e450bf44e925:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/commented-out-code",
          "ruleIndex": 81,
          "message": {
            "text": "This comment appears to contain commented-out code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o2/o2replyserver.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 7
                },
                "region": {
                  "startLine": 17,
                  "endColumn": 35
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c7f0a952655bf8dd:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/missing-return",
          "ruleIndex": 85,
          "message": {
            "text": "Function isPlaylistSelected should return a value of type bool but does not return a value here"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "activitylistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 10
                },
                "region": {
                  "startLine": 31,
                  "endColumn": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "24b0f3c488044886:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/missing-return",
          "ruleIndex": 85,
          "message": {
            "text": "Function getItem should return a value of type Sound but does not return a value here"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "activitylistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 10
                },
                "region": {
                  "startLine": 19,
                  "endColumn": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "dc5bdfe08dd608d9:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/missing-return",
          "ruleIndex": 85,
          "message": {
            "text": "Function getItem should return a value of type Sound but does not return a value here"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "likemodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 11
                },
                "region": {
                  "startLine": 13,
                  "endColumn": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "fc1b7fed2cb245f4:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/missing-return",
          "ruleIndex": 85,
          "message": {
            "text": "Function getItem should return a value of type Sound but does not return a value here"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "playlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 12
                },
                "region": {
                  "startLine": 13,
                  "endColumn": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "19d68df476c16a36:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/missing-return",
          "ruleIndex": 85,
          "message": {
            "text": "Function getItem should return a value of type Sound but does not return a value here"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "playlistsoundlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 13
                },
                "region": {
                  "startLine": 12,
                  "endColumn": 2
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8aa46ea72176f44d:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_activitylistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 14
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 77,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "f0e31a46ab083689:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_enterusernamewidget.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 15
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8a424fadd002bfd0:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_introwidget.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 16
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c058c1ecc087cb9a:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_likemodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 17
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 77,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "9d81f9ab544e75e0:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_likemodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 17
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d39cc4ed01316718:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_likemodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 17
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 0
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 13,
                  "endLine": 200,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 0
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 13,
                  "endLine": 207,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:2",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 18
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 13,
                  "endLine": 102,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 18
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 13,
                  "endLine": 109,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:2",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 18
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 13,
                  "endLine": 116,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:3",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 1
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 13,
                  "endLine": 240,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 1
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 13,
                  "endLine": 247,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:2",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 1
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 13,
                  "endLine": 254,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:3",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2reply.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 19
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "endLine": 94,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d39cc4ed01316718:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2reply.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 19
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "endLine": 92,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 20
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 13,
                  "endLine": 145,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269b02fec026f:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 20
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 13,
                  "endLine": 152,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 20
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 13,
                  "endLine": 159,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:2",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 20
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 13,
                  "endLine": 166,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:3",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 20
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 13,
                  "endLine": 173,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:4",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2requestor.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 20
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 13,
                  "endLine": 180,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:5",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2settingsstore.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 2
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 9,
                  "endLine": 81,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6cbb41a32adfeea7:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2settingsstore.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 2
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 9,
                  "endLine": 100,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "71ec8835df9055aa:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2settingsstore.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 2
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 9,
                  "endLine": 108,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5edd1d9e28853583:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playbackmanager.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 21
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 9,
                  "endLine": 167,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "42c3d8a00d9135b4:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playbackmanager.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 21
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 13,
                  "endLine": 165,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 22
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 77,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "159fa20dd048b2af:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 22
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d39cc4ed01316718:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 22
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playlistsoundlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 23
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 9,
                  "endLine": 77,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8289578130d8138f:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playlistsoundlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 23
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 9,
                  "endLine": 88,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d39cc4ed01316718:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_playlistsoundlistmodel.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 23
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 13,
                  "endLine": 177,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 13,
                  "endLine": 184,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:2",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 13,
                  "endLine": 191,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:3",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 13,
                  "endLine": 198,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:4",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 13,
                  "endLine": 205,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:5",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 13,
                  "endLine": 212,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:6",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundstorage.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 25
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 13,
                  "endLine": 132,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundstorage.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 25
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 13,
                  "endLine": 139,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:2",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o1requestor.moc",
                  "uriBaseId": "%SRCROOT%",
                  "index": 26
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 93,
                  "endColumn": 10
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d39cc4ed01316718:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/trivial-switch",
          "ruleIndex": 90,
          "message": {
            "text": "This switch statement should either handle more cases, or be rewritten as an if statement."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "o1requestor.moc",
                  "uriBaseId": "%SRCROOT%",
                  "index": 26
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 91,
                  "endColumn": 14
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ebb269af96fe21a6:1",
            "primaryLocationStartColumnFingerprint": "0"
          }
        },
        {
          "ruleId": "cpp/poorly-documented-function",
          "ruleIndex": 138,
          "message": {
            "text": "Poorly documented function: fewer than 2% comments for a function of 203 lines."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o2.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 1
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 6,
                  "endColumn": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "81609ff7e82704ca:1",
            "primaryLocationStartColumnFingerprint": "5"
          }
        },
        {
          "ruleId": "cpp/poorly-documented-function",
          "ruleIndex": 138,
          "message": {
            "text": "Poorly documented function: fewer than 2% comments for a function of 124 lines."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_soundcloudapi.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 24
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 6,
                  "endColumn": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "683f0768985f687b:1",
            "primaryLocationStartColumnFingerprint": "5"
          }
        },
        {
          "ruleId": "cpp/poorly-documented-function",
          "ruleIndex": 138,
          "message": {
            "text": "Poorly documented function: fewer than 2% comments for a function of 157 lines."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "moc_o1.cpp",
                  "uriBaseId": "%SRCROOT%",
                  "index": 0
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 6,
                  "endColumn": 28
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "7098636b58832361:1",
            "primaryLocationStartColumnFingerprint": "5"
          }
        }
      ],
      "columnKind": "utf16CodeUnits",
      "properties": {
        "semmle.formatSpecifier": "sarif-latest"
      }
    }
  ]
}